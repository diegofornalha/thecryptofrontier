--- a/src/core/memory-enhanced-agent.ts
+++ b/src/core/memory-enhanced-agent.ts
@@ -5,8 +5,7 @@
 
 import { Agent, AgentConfig } from './agent';
 import { Message } from '../types';
-import { exec } from 'child_process';
-import { promisify } from 'util';
+import * as http from 'http';
 
 const execAsync = promisify(exec);
 
@@ -62,23 +61,41 @@ export abstract class MemoryEnhancedAgent extends Agent {
                 })
             };
 
-            const command = `curl -X POST http://${this.memoryHost}:3002/mcp/add_memory -H "Content-Type: application/json" -d '${JSON.stringify(payload)}' -s`;
             console.log(`üîÑ Salvando mem√≥ria para ${this.memoryUserId}...`);
-            const { stdout, stderr } = await execAsync(command);
             
-            if (stderr) {
-                console.error('‚ùå Erro ao salvar mem√≥ria:', stderr);
-                return;
-            }
-            
-            if (stdout) {
-                const result = JSON.parse(stdout);
-                console.log(`üíæ Mem√≥ria salva com ID: ${result.id}`);
-                console.log(`   Conte√∫do: ${content.substring(0, 50)}...`);
-            }
+            const data = JSON.stringify(payload);
+            const options = {
+                hostname: this.memoryHost,
+                port: 3002,
+                path: '/mcp/add_memory',
+                method: 'POST',
+                headers: {
+                    'Content-Type': 'application/json',
+                    'Content-Length': Buffer.byteLength(data)
+                }
+            };
+
+            const response = await this.makeHttpRequest(options, data);
+            const result = JSON.parse(response);
+            console.log(`üíæ Mem√≥ria salva com ID: ${result.id}`);
+            console.log(`   Conte√∫do: ${content.substring(0, 50)}...`);
         } catch (error) {
             console.error('‚ùå Erro ao salvar mem√≥ria:', error);
         }
     }
+
+    private makeHttpRequest(options: any, data: string): Promise<string> {
+        return new Promise((resolve, reject) => {
+            const req = http.request(options, (res) => {
+                let body = '';
+                res.on('data', chunk => body += chunk);
+                res.on('end', () => resolve(body));
+            });
+            req.on('error', reject);
+            req.write(data);
+            req.end();
+        });
+    }
 
     /**
      * Busca mem√≥rias relevantes