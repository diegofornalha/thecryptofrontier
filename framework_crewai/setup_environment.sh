#!/bin/bash

# Script de configura√ß√£o para o sistema de automa√ß√£o de blog
# Este script instala as depend√™ncias e configura o ambiente

set -e # Parar em caso de erro

echo "üöÄ Configurando ambiente para sistema de automa√ß√£o de blog"

# Verificar python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 n√£o encontrado. Por favor instale o Python 3.8 ou superior."
    exit 1
fi

PYTHON_VERSION=$(python3 -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')
if (( $(echo "$PYTHON_VERSION < 3.8" | bc -l) )); then
    echo "‚ùå Python 3.8 ou superior √© necess√°rio. Vers√£o detectada: $PYTHON_VERSION"
    exit 1
fi

echo "‚úÖ Python vers√£o $PYTHON_VERSION encontrado"

# Verificar Redis
REDIS_INSTALLED=false
if command -v redis-cli &> /dev/null; then
    if redis-cli ping &> /dev/null; then
        echo "‚úÖ Redis encontrado e funcionando"
        REDIS_INSTALLED=true
    else
        echo "‚ö†Ô∏è Redis instalado mas n√£o est√° em execu√ß√£o"
    fi
else
    echo "‚ö†Ô∏è Redis n√£o encontrado. Recomendamos instalar o Redis para funcionalidade completa."
    echo "  Voc√™ pode instalar o Redis com: sudo apt-get install redis-server (Ubuntu/Debian)"
    echo "  ou: brew install redis (macOS)"
fi

# Criar ambiente virtual
echo "üîÑ Criando ambiente virtual..."
if [ -d "venv" ]; then
    echo "‚ö†Ô∏è Ambiente virtual existente encontrado. Deseja recriar? (s/N)"
    read -r response
    if [[ "$response" =~ ^([sS]|[sS][iI][mM])$ ]]; then
        rm -rf venv
        python3 -m venv venv
        echo "‚úÖ Ambiente virtual recriado"
    else
        echo "üîÑ Usando ambiente virtual existente"
    fi
else
    python3 -m venv venv
    echo "‚úÖ Ambiente virtual criado"
fi

# Ativar ambiente virtual
echo "üîÑ Ativando ambiente virtual..."
source venv/bin/activate

# Instalar depend√™ncias
echo "üîÑ Instalando depend√™ncias..."
pip install --upgrade pip
pip install -r requirements.txt

# Se o Redis n√£o est√° instalado, instalar redis-py com modo de simula√ß√£o
if [ "$REDIS_INSTALLED" = false ]; then
    echo "üîÑ Instalando redis-py com suporte a modo de simula√ß√£o..."
    pip install fakeredis
fi

# Verificar vari√°veis de ambiente
echo "üîÑ Verificando vari√°veis de ambiente..."
ENV_FILE=".env"
if [ ! -f "$ENV_FILE" ]; then
    echo "‚ö†Ô∏è Arquivo .env n√£o encontrado. Criando um modelo..."
    cat > "$ENV_FILE" << EOL
# Vari√°veis de ambiente para o sistema de automa√ß√£o de blog

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
# REDIS_PASSWORD=sua_senha_redis

# Sanity CMS
# SANITY_PROJECT_ID=seu_id_do_projeto
# SANITY_API_TOKEN=seu_token_api

# LLM - Google Gemini Pro
# GEMINI_API_KEY=sua_chave_api_gemini
EOL
    echo "‚úÖ Arquivo .env criado"
    echo "‚ö†Ô∏è Por favor, edite o arquivo .env e configure as vari√°veis necess√°rias"
else
    echo "‚úÖ Arquivo .env encontrado"
fi

# Criar diret√≥rios de sa√≠da
echo "üîÑ Criando diret√≥rios de dados..."
mkdir -p output/published
mkdir -p output/errors
mkdir -p output/pending
mkdir -p posts_para_traduzir
mkdir -p posts_traduzidos
mkdir -p posts_formatados
mkdir -p posts_publicados
mkdir -p logs

# Verificar se o Gemini est√° configurado
if grep -q "GEMINI_API_KEY=" "$ENV_FILE" && ! grep -q "GEMINI_API_KEY=sua_chave_api_gemini" "$ENV_FILE"; then
    echo "‚úÖ API Key do Gemini encontrada"
else
    echo "‚ö†Ô∏è GEMINI_API_KEY n√£o configurada no arquivo .env."
    echo "  Voc√™ precisar√° dessa chave para que o CrewAI funcione corretamente."
    echo "  Obtenha uma em: https://ai.google.dev/"
fi

# Testar conex√£o Redis
if [ "$REDIS_INSTALLED" = true ]; then
    echo "üîÑ Testando conex√£o com Redis..."
    if python -c "from redis_tools import redis_client; print('REDIS OK' if redis_client and redis_client.ping() else 'REDIS ERROR')"; then
        echo "‚úÖ Conex√£o com Redis funcionando"
    else
        echo "‚ùå Erro ao conectar com Redis. Verifique as configura√ß√µes no arquivo .env"
    fi
fi

echo "
üéâ Configura√ß√£o conclu√≠da!

Para iniciar:
1. Ative o ambiente virtual: source venv/bin/activate
2. Adicione artigos √† fila: python enqueue_demo_article.py
3. Processe a fila: python process_article_queue.py

Para mais informa√ß√µes, consulte o README.md
"