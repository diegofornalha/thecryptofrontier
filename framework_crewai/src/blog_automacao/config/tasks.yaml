# Configuração das tarefas para automação de blog de criptomoedas
# ------------------------------------------------------

# Tarefas de monitoramento
monitoring_task:
  description: >
    Monitore os feeds RSS configurados usando a RssFeedTool para encontrar novos artigos sobre criptomoedas.
    Para cada artigo encontrado, forneça:
    1. Um resumo conciso do artigo (max 3 frases)
    2. Os principais tópicos abordados (max 5 tópicos)
    3. Razão pela qual pode ser relevante para investidores brasileiros
    4. O conteúdo original completo do artigo e seus metadados (título, url, data, fonte) para passagem para a próxima tarefa.

    Formato de resposta esperado para CADA artigo:
    {{
     "resumo": "Resumo aqui", 
     "topicos": ["tópico 1", "tópico 2", ...], 
     "relevancia": "Explicação da relevância",
     "original_article": {{ "title": "...", "url": "...", "date": "...", "content": "...", "source": "..." }}
    }}
  expected_output: >
    Uma lista de JSONs, cada um representando a análise de um artigo novo encontrado, 
    incluindo os dados originais do artigo. Ou uma mensagem indicando que nenhum artigo novo foi encontrado.
  agent: monitor

selection_task:
  description: >
    Avalie a relevância de CADA artigo fornecido pela tarefa anterior para o público brasileiro.
    Input esperado: Uma lista de JSONs (output da monitoring_task).

    Para cada artigo na lista:
    Use os campos "resumo", "topicos", "relevancia" para avaliar.
    Critérios de avaliação:
    1. Relevância para investidores brasileiros
    2. Novidade da informação
    3. Potencial de interesse
    4. Impacto no mercado brasileiro

    Se o artigo for relevante (SIM):
    - Pegue os dados do campo "original_article".
    - Crie um nome de arquivo único (ex: para_traduzir_artigo.json).
    - Salve um arquivo JSON/Markdown em \'posts_para_traduzir/\' contendo os dados originais 
      (título, url, data, conteúdo, fonte) com um frontmatter apropriado.
    - Retorne o caminho completo do arquivo salvo.
    
    Se o artigo NÃO for relevante:
    - Retorne None ou uma string vazia para este artigo.

  expected_output: >
    Uma lista contendo os caminhos dos arquivos salvos em \'posts_para_traduzir\' para os artigos
    selecionados, ou None/vazio para os não selecionados. 
    Ex: ["posts_para_traduzir/arq1.json", null, "posts_para_traduzir/arq3.json"]
  agent: selector
  # Esta tarefa agora é responsável por salvar o arquivo, como faz a lógica de fallback no main.py

# Tarefas de tradução
translation_task:
  description: >
    Traduza o conteúdo do artigo fornecido no arquivo {arquivo_markdown}.
    O arquivo contém metadados (frontmatter) e o conteúdo original.
    Leia o conteúdo original do arquivo.

    Siga estas diretrizes:
    1. Traduza o CONTEÚDO do inglês para português brasileiro formal.
    2. Mantenha termos técnicos de cripto quando não houver equivalente em português.
    3. Preserve qualquer formatação importante do texto original.
    4. Mantenha os metadados originais do frontmatter intactos.
    
    Retorne o conteúdo completo em formato markdown, com o frontmatter original 
    seguido pelo corpo do texto TRADUZIDO.
  expected_output: >
    Uma string contendo o markdown completo com frontmatter original e corpo traduzido.
  agent: translator
  # Input: {arquivo_markdown} (caminho do arquivo em posts_para_traduzir)

localization_task:
  description: >
    Adapte o artigo traduzido (recebido da tarefa anterior) para o público brasileiro.
    O input contém o frontmatter original e o corpo traduzido.
    Você também tem acesso ao caminho do arquivo original via {arquivo_markdown} se precisar de metadados extras.
    
    Siga estas diretrizes:
    1. Analise o CONTEÚDO traduzido.
    2. Adicione contextualizações relevantes para o mercado brasileiro quando necessário.
    3. Adapte exemplos para o contexto brasileiro se apropriado.
    4. Explique conceitos que podem ser menos conhecidos no Brasil.
    5. Mantenha o tom e estilo do artigo original.
    6. Formate o resultado como um post de blog em Markdown.
    7. Mantenha o frontmatter original, mas adicione/atualize:
       - tags: 5-8 tags relevantes em português.
       - categoria: Classifique o artigo em uma categoria principal (ex: Bitcoin, Ethereum, DeFi, NFTs, Regulamentação, etc.)
    
    Gere um nome de arquivo de saída baseado no nome do {arquivo_markdown} original, 
    substituindo \'para_traduzir_\' por \'traduzido_\'.
    Salve o resultado final (markdown com frontmatter atualizado e corpo adaptado)
    no diretório \'posts_traduzidos/\' usando o nome de arquivo gerado.
  expected_output: >
    O caminho completo do arquivo final salvo em \'posts_traduzidos/\'. 
    Ex: \'posts_traduzidos/traduzido_artigo.json\'
  agent: localizer
  context: # Depende explicitamente do output da translation_task (o conteúdo traduzido)
    - translation_task 
  # Input implícito: {arquivo_markdown} (passado pelo kickoff da traducao_crew)
  # Output explícito no arquivo: posts_traduzidos/{output_filename}.json (definido na descrição)


# Tarefas de publicação
editing_task:
  description: >
    Revise e melhore o artigo adaptado fornecido no arquivo {arquivo_markdown}.
    O arquivo está em \'posts_traduzidos/\' e contém frontmatter e corpo adaptado.
    Leia o conteúdo do arquivo.

    Siga estas diretrizes:
    1. Corrija erros gramaticais e ortográficos no corpo do texto.
    2. Melhore a coerência e fluidez do texto.
    3. Verifique a precisão das informações técnicas.
    4. Garanta que o tom seja adequado ao público-alvo.
    5. Mantenha o formato Markdown e o frontmatter intactos.
    
    Retorne o conteúdo completo revisado (frontmatter + corpo revisado) como string.
  expected_output: >
    Uma string contendo o markdown completo com frontmatter original e corpo revisado.
  agent: editor
  # Input: {arquivo_markdown} (caminho do arquivo em posts_traduzidos)

seo_optimization_task:
  description: >
    Otimize o artigo revisado (recebido da tarefa anterior) para SEO.
    O input contém frontmatter e corpo revisado.
    
    Siga estas diretrizes:
    1. Analise o CONTEÚDO revisado.
    2. Identifique palavras-chave principais.
    3. Otimize o título no frontmatter para SEO (mantendo significado).
    4. Verifique a densidade de palavras-chave no corpo.
    5. Sugira melhorias na estrutura de cabeçalhos (h1, h2, h3) se necessário (apenas comente, não altere aqui).
    6. Crie uma meta descrição de até 160 caracteres.
    7. Adicione um campo \'seo\' ao frontmatter contendo \'meta_title\' e \'meta_description\'.
    
    Retorne o artigo completo otimizado (frontmatter atualizado + corpo revisado) como string.
  expected_output: >
    Uma string contendo o markdown completo com frontmatter atualizado (incluindo \'seo\') e corpo revisado.
  agent: seo_analyst
  context: # Depende do output da editing_task
    - editing_task
  # Input implícito: {arquivo_markdown} (passado pelo kickoff da publicacao_crew)


publish_task:
  description: >
    Prepare e publique o artigo otimizado (recebido da tarefa anterior) no Sanity CMS.
    O input contém o frontmatter otimizado e o corpo revisado.
    Você também tem acesso ao caminho do arquivo original via {arquivo_markdown}.

    Use a ferramenta \'SanityPublishTool\'. Passe o conteúdo completo recebido 
    (frontmatter + corpo) para a ferramenta, preferencialmente via argumento \'markdown_content\'.
    A ferramenta é responsável por extrair metadados, formatar para Portable Text e enviar para a API do Sanity.

    Verifique o resultado da ferramenta.
  expected_output: >
    O resultado retornado pela SanityPublishTool, geralmente um JSON indicando 
    sucesso (com ID/slug) ou falha (com detalhes do erro).
  agent: publisher
  context: # Depende do output da seo_optimization_task
    - seo_optimization_task
  # Input implícito: {arquivo_markdown} (passado pelo kickoff da publicacao_crew)
