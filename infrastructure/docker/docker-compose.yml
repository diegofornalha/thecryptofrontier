# Docker Compose Principal - Frontend + Strapi + Serviços Core
# Arquivo consolidado para simplificar gestão
# Criado: 2025-06-16

version: '3.8'

services:
  # ===========================================
  # FRONTEND - Next.js Application
  # ===========================================
  frontend:
    build:
      context: ../../
      dockerfile: Dockerfile.frontend.production
    container_name: thecryptofrontier-frontend
    ports:
      - "3300:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_STRAPI_URL=${STRAPI_URL:-http://strapi:1337}
    volumes:
      - ../../src/.env.production:/app/.env.production:ro
    restart: unless-stopped
    networks:
      - crypto-network
    depends_on:
      - strapi
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.thecryptofrontier.service=frontend"
      - "com.thecryptofrontier.tier=presentation"

  # ===========================================
  # BACKEND - Strapi CMS v5
  # ===========================================
  strapi:
    image: strapi/strapi:latest
    container_name: thecryptofrontier-strapi
    ports:
      - "1337:1337"
    environment:
      - NODE_ENV=production
      - DATABASE_CLIENT=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=${DATABASE_NAME:-strapi}
      - DATABASE_USERNAME=${DATABASE_USERNAME:-strapi}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-strapi}
      - DATABASE_SSL=false
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}
      - APP_KEYS=${APP_KEYS}
      - API_TOKEN_SALT=${API_TOKEN_SALT}
      - TRANSFER_TOKEN_SALT=${TRANSFER_TOKEN_SALT}
    volumes:
      - strapi-data:/app/public/uploads
      - ../../strapi/config:/app/config:ro
      - ../../strapi/src:/app/src:ro
    restart: unless-stopped
    networks:
      - crypto-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:1337/admin"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.thecryptofrontier.service=strapi"
      - "com.thecryptofrontier.tier=backend"

  # ===========================================
  # DATABASE - PostgreSQL
  # ===========================================
  postgres:
    image: postgres:15-alpine
    container_name: thecryptofrontier-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-strapi}
      - POSTGRES_USER=${DATABASE_USERNAME:-strapi}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-strapi}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.thecryptofrontier.service=postgres"
      - "com.thecryptofrontier.tier=database"

  # ===========================================
  # CACHE - Redis
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: thecryptofrontier-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.thecryptofrontier.service=redis"
      - "com.thecryptofrontier.tier=cache"

  # ===========================================
  # SEARCH - Algolia Sync Service (Opcional)
  # ===========================================
  algolia-sync:
    build:
      context: ../../framework_crewai/blog_crew
      dockerfile: Dockerfile
    container_name: thecryptofrontier-algolia-sync
    environment:
      - ALGOLIA_APP_ID=${ALGOLIA_APP_ID}
      - ALGOLIA_API_KEY=${ALGOLIA_API_KEY}
      - ALGOLIA_INDEX_NAME=${ALGOLIA_INDEX_NAME:-posts}
      - STRAPI_URL=http://strapi:1337
    restart: unless-stopped
    networks:
      - crypto-network
    depends_on:
      - strapi
    profiles:
      - search
    labels:
      - "com.thecryptofrontier.service=algolia-sync"
      - "com.thecryptofrontier.tier=integration"

volumes:
  postgres-data:
    name: thecryptofrontier_postgres_data
  strapi-data:
    name: thecryptofrontier_strapi_data
  redis-data:
    name: thecryptofrontier_redis_data

networks:
  crypto-network:
    name: thecryptofrontier_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16