#!/usr/bin/env python3
"""
Blog Agent usando Claude CLI - Custo Zero
Executa tarefas atrav√©s do Claude instalado localmente
"""
import subprocess
import json
import os
from typing import Dict, Any, List
from datetime import datetime
import asyncio
import aiohttp

class ClaudeCLIBlogAgent:
    """
    Agente que usa Claude CLI ao inv√©s de API
    Totalmente gratuito!
    """
    
    def __init__(self):
        self.strapi_url = os.getenv('STRAPI_URL', 'http://localhost:1338')
        self.strapi_token = os.getenv('STRAPI_API_TOKEN')
        self.tasks_dir = "/home/strapi/thecryptofrontier/claude-agents/tasks"
        os.makedirs(self.tasks_dir, exist_ok=True)
    
    def create_task_file(self, task_type: str, context: Dict[str, Any]) -> str:
        """Cria arquivo de tarefa para Claude CLI processar"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self.tasks_dir}/{task_type}_{timestamp}.md"
        
        # Template baseado no tipo de tarefa
        templates = {
            "create_post": f"""
# Tarefa: Criar Post de Blog

## Contexto
- T√≥pico: {context.get('topic')}
- Palavras-chave: {', '.join(context.get('keywords', []))}
- Estilo: {context.get('style', 'profissional e acess√≠vel')}

## Instru√ß√µes

Por favor, crie um post de blog completo com:

1. **T√≠tulo** (m√°ximo 60 caracteres, otimizado para SEO)
2. **Slug** (URL amig√°vel)
3. **Meta Descri√ß√£o** (150-160 caracteres)
4. **Conte√∫do** (1500-2000 palavras em Markdown)
   - Introdu√ß√£o engajante
   - 5-7 se√ß√µes com subt√≠tulos (H2, H3)
   - Exemplos pr√°ticos
   - Estat√≠sticas relevantes
   - Conclus√£o com CTA
5. **Tags** (5-7 tags relevantes)
6. **Categorias** (1-2 categorias)

## Formato de Sa√≠da

Salve o resultado em: `{self.tasks_dir}/output_{timestamp}.json`

```json
{{
    "title": "...",
    "slug": "...",
    "excerpt": "...",
    "content": "...",
    "seo": {{
        "metaTitle": "...",
        "metaDescription": "..."
    }},
    "tags": ["..."],
    "categories": ["..."]
}}
```
""",
            
            "enhance_content": f"""
# Tarefa: Melhorar Conte√∫do Existente

## Conte√∫do Original
{context.get('content')}

## Instru√ß√µes

Melhore o conte√∫do:
1. Clareza e fluidez
2. Otimiza√ß√£o SEO
3. Engagement do leitor
4. Corre√ß√£o gramatical
5. Adicione CTAs relevantes

Mantenha o tom: {context.get('tone', 'profissional')}
""",
            
            "research_topic": f"""
# Tarefa: Pesquisar T√≥pico

## T√≥pico: {context.get('topic')}

## √Åreas de Pesquisa
1. Tend√™ncias atuais
2. Estat√≠sticas relevantes (2024-2025)
3. Cases de sucesso
4. Melhores pr√°ticas
5. Insights √∫nicos

## Output
Compile um relat√≥rio estruturado com:
- Resumo executivo
- Principais descobertas
- Dados e estat√≠sticas
- Recomenda√ß√µes
- Fontes (quando poss√≠vel)
"""
        }
        
        content = templates.get(task_type, "Tarefa n√£o definida")
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return filename
    
    def execute_with_claude_cli(self, task_file: str) -> str:
        """
        Executa tarefa usando Claude CLI
        Simula como seria a execu√ß√£o via CLI
        """
        
        # Comando para executar com Claude CLI
        # Na pr√°tica, voc√™ executaria manualmente ou via script
        command = f"""
        # Para executar manualmente:
        # 1. Abra o Claude CLI
        # 2. Cole o conte√∫do do arquivo: {task_file}
        # 3. Claude processar√° e retornar√° o resultado
        # 4. Salve o output no arquivo especificado
        """
        
        print(f"üìã Tarefa criada: {task_file}")
        print("ü§ñ Execute com Claude CLI para processar")
        
        return task_file
    
    async def process_claude_output(self, output_file: str) -> Dict[str, Any]:
        """Processa o output do Claude e publica no Strapi"""
        
        try:
            with open(output_file, 'r', encoding='utf-8') as f:
                post_data = json.load(f)
            
            # Publica no Strapi
            return await self.publish_to_strapi(post_data)
            
        except FileNotFoundError:
            print(f"‚è≥ Aguardando Claude processar: {output_file}")
            return None
        except json.JSONDecodeError:
            print(f"‚ùå Erro ao ler JSON: {output_file}")
            return None
    
    async def publish_to_strapi(self, post_data: Dict[str, Any]) -> Dict[str, Any]:
        """Publica post no Strapi"""
        
        headers = {
            'Authorization': f'Bearer {self.strapi_token}',
            'Content-Type': 'application/json'
        }
        
        strapi_data = {
            'data': {
                'title': post_data.get('title'),
                'slug': post_data.get('slug'),
                'content': post_data.get('content'),
                'excerpt': post_data.get('excerpt'),
                'seo': post_data.get('seo'),
                'tags': post_data.get('tags', []),
                'categories': post_data.get('categories', []),
                'status': 'published',
                'publishedAt': datetime.now().isoformat()
            }
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.strapi_url}/api/posts",
                headers=headers,
                json=strapi_data
            ) as response:
                if response.status in [200, 201]:
                    result = await response.json()
                    print(f"‚úÖ Post publicado: {result['data']['id']}")
                    return result
                else:
                    print(f"‚ùå Erro ao publicar: {response.status}")
                    return None

# Script para monitorar e processar outputs
async def monitor_outputs():
    """Monitora outputs do Claude e publica automaticamente"""
    
    agent = ClaudeCLIBlogAgent()
    processed = set()
    
    while True:
        # Verifica arquivos de output
        output_files = [f for f in os.listdir(agent.tasks_dir) 
                       if f.startswith('output_') and f.endswith('.json')]
        
        for output_file in output_files:
            if output_file not in processed:
                full_path = os.path.join(agent.tasks_dir, output_file)
                result = await agent.process_claude_output(full_path)
                
                if result:
                    processed.add(output_file)
                    # Move para pasta de processados
                    os.rename(full_path, 
                             os.path.join(agent.tasks_dir, 'processed', output_file))
        
        # Aguarda 30 segundos antes de verificar novamente
        await asyncio.sleep(30)

# Exemplo de uso
async def create_blog_post_task(topic: str, keywords: List[str]):
    """Cria tarefa para Claude CLI processar"""
    
    agent = ClaudeCLIBlogAgent()
    
    context = {
        'topic': topic,
        'keywords': keywords,
        'style': 'profissional mas acess√≠vel'
    }
    
    task_file = agent.create_task_file('create_post', context)
    
    print(f"""
    ‚úÖ Tarefa criada com sucesso!
    
    üìã Arquivo: {task_file}
    
    ü§ñ Pr√≥ximos passos:
    1. Abra o arquivo em um editor
    2. Copie o conte√∫do
    3. Cole no Claude CLI
    4. Salve o resultado no arquivo de output especificado
    5. O monitor publicar√° automaticamente no Strapi
    
    üí° Dica: Use 'python monitor_outputs.py' para publica√ß√£o autom√°tica
    """)

if __name__ == "__main__":
    # Exemplo: Criar tarefa
    asyncio.run(create_blog_post_task(
        topic="Como a IA est√° revolucionando o atendimento ao cliente",
        keywords=["IA atendimento", "chatbot", "automa√ß√£o suporte", "customer service AI"]
    ))