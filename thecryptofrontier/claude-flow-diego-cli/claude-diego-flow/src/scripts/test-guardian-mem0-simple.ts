/**
 * Teste simples de integra√ß√£o Guardian + Mem0
 */

import { GuardianMemoryManagerOSS } from '../utils/guardian-memory-oss';

async function testSimple() {
  console.log('üß™ Teste simples Guardian + Mem0...\n');
  
  const memory = new GuardianMemoryManagerOSS('http://localhost:3002');
  
  try {
    // 1. Adicionar mem√≥ria do Guardian
    console.log('1Ô∏è‚É£ Adicionando mem√≥ria do Guardian...');
    await memory.addMemory({
      content: 'Guardian analisou o projeto claude-flow-diego e encontrou 10 agentes',
      metadata: {
        project: 'claude-flow-diego',
        action: 'an√°lise',
        agentsFound: 10,
        date: new Date().toISOString()
      },
      tags: ['an√°lise', 'guardian', 'agentes'],
      category: 'project-analysis'
    });
    console.log('‚úÖ Mem√≥ria adicionada!');
    
    // 2. Buscar mem√≥rias
    console.log('\n2Ô∏è‚É£ Buscando mem√≥rias do Guardian...');
    const results = await memory.searchMemories('claude-flow-diego', 5);
    console.log(`üìä Encontradas ${results.length} mem√≥rias:`);
    results.forEach((mem, idx) => {
      console.log(`  ${idx + 1}. ${mem.content}`);
      if (mem.metadata) {
        console.log(`     Metadata:`, mem.metadata);
      }
    });
    
    // 3. Adicionar log de tarefa
    console.log('\n3Ô∏è‚É£ Registrando tarefa do Guardian...');
    await memory.addMemory({
      content: 'Guardian iniciou organiza√ß√£o dos agentes de log',
      metadata: {
        project: 'claude-flow-diego',
        action: 'organiza√ß√£o',
        taskType: 'unifica√ß√£o-logs',
        status: 'iniciado',
        timestamp: new Date().toISOString()
      },
      tags: ['tarefa', 'logs', 'organiza√ß√£o'],
      category: 'task-log'
    });
    console.log('‚úÖ Tarefa registrada!');
    
    // 4. Simular conclus√£o
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    await memory.addMemory({
      content: 'Guardian concluiu unifica√ß√£o dos 3 agentes de log em 1 sistema unificado',
      metadata: {
        project: 'claude-flow-diego',
        action: 'organiza√ß√£o',
        taskType: 'unifica√ß√£o-logs',
        status: 'conclu√≠do',
        agentesProcessados: 3,
        resultado: 'sistema-unificado',
        timestamp: new Date().toISOString()
      },
      tags: ['tarefa', 'logs', 'conclu√≠do'],
      category: 'task-log'
    });
    console.log('‚úÖ Conclus√£o registrada!');
    
    // 5. Buscar hist√≥rico de tarefas
    console.log('\n4Ô∏è‚É£ Hist√≥rico de tarefas...');
    const taskHistory = await memory.searchMemories('unifica√ß√£o-logs', 10);
    console.log(`üìã ${taskHistory.length} registros encontrados`);
    
    console.log('\n‚úÖ Teste conclu√≠do com sucesso!');
    console.log('ü§ù Guardian e Mem0 est√£o trabalhando juntos!');
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  }
}

// Executar
testSimple().catch(console.error);