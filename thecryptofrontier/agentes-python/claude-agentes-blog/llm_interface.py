import os
import json
import re
from typing import Dict, Any

class LLMInterface:
    def generate_content(self, prompt: str) -> Dict[str, Any]:
        raise NotImplementedError

class ClaudeLLM(LLMInterface):
    def generate_content(self, prompt: str) -> Dict[str, Any]:
        # Extrai o tópico do prompt para gerar um título e slug mais dinâmicos
        topic_match = re.search(r'Crie um post de blog completo sobre: (.*)', prompt)
        topic = topic_match.group(1) if topic_match else "Conteúdo Genérico"
        
        # Gera um slug simples a partir do tópico
        slug = re.sub(r'[^a-z0-9\s]', '', topic.lower())
        slug = re.sub(r'\s+', '-', slug)
        slug = slug.strip('-')

        print(f"Simulando geração de conteúdo com Claude CLI para o prompt:\n{prompt[:200]}...")
        return {
            "title": topic,
            "slug": slug,
            "excerpt": f"This is a simulated excerpt generated by Claude about {topic}.",
            "content": f"Conteúdo completo simulado gerado pelo Claude em Markdown sobre {topic}.",
            "seo": {
                "metaTitle": f"Meta Título Claude: {topic}",
                "metaDescription": f"Meta Descrição Claude: {topic}"
            },
            "tags": ["claude", "simulado", slug],
            "categories": ["tecnologia"]
        }

class GeminiLLM(LLMInterface):
    def __init__(self):
        self.api_key = os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            print("Aviso: GEMINI_API_KEY não definida. A interação com Gemini será simulada.")

    def generate_content(self, prompt: str) -> Dict[str, Any]:
        # Extrai o tópico do prompt para gerar um título e slug mais dinâmicos
        topic_match = re.search(r'Crie um post de blog completo sobre: (.*)', prompt)
        topic = topic_match.group(1) if topic_match else "Conteúdo Genérico"
        
        # Gera um slug simples a partir do tópico
        slug = re.sub(r'[^a-z0-9\s]', '', topic.lower())
        slug = re.sub(r'\s+', '-', slug)
        slug = slug.strip('-')

        print(f"Simulando geração de conteúdo com Gemini para o prompt:\n{prompt[:200]}...")
        return {
            "title": topic,
            "slug": slug,
            "excerpt": f"This is a simulated excerpt generated by Gemini about {topic}.",
            "content": f"Conteúdo completo simulado gerado pelo Gemini em Markdown sobre {topic}.",
            "seo": {
                "metaTitle": f"Meta Título Gemini: {topic}",
                "metaDescription": f"Meta Descrição Gemini: {topic}"
            },
            "tags": ["gemini", "simulado", slug],
            "categories": ["inteligencia-artificial"]
        }
