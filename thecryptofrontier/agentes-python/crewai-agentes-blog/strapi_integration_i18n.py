#!/usr/bin/env python3
"""
Integra√ß√£o Strapi com schema correto - apenas campos que existem
"""

import json
import requests
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
import logging
from pathlib import Path
import re
import unicodedata

from dotenv import load_dotenv
load_dotenv()

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class StrapiI18nIntegration:
    """Integra√ß√£o com Strapi v5 usando apenas campos do schema real"""
    
    def __init__(self, locale: str = 'pt-BR'):
        self.base_url = os.getenv('STRAPI_URL', 'http://localhost:1337')
        self.api_token = os.getenv('STRAPI_API_TOKEN', '')
        self.locale = locale
        self.headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_token}'
        }
        self.stats = {
            'created': 0,
            'failed': 0,
            'errors': []
        }
        
        # Configura√ß√£o de locales dispon√≠veis
        self.available_locales = ['en', 'pt-BR', 'es']
        self.default_locale = 'pt-BR'
    
    def set_locale(self, locale: str):
        """Define o locale para as pr√≥ximas opera√ß√µes"""
        if locale in self.available_locales:
            self.locale = locale
            logger.info(f"Locale alterado para: {locale}")
        else:
            logger.warning(f"Locale '{locale}' n√£o dispon√≠vel. Locales dispon√≠veis: {self.available_locales}")
    
    def get_available_locales(self) -> List[str]:
        """Retorna lista de locales dispon√≠veis"""
        try:
            response = requests.get(
                f"{self.base_url}/api/i18n/locales",
                headers=self.headers
            )
            if response.status_code == 200:
                data = response.json()
                return [locale['code'] for locale in data['data']]
            return self.available_locales
        except Exception as e:
            logger.warning(f"Erro ao buscar locales: {e}")
            return self.available_locales
    
    def validate_post_data(self, data: Dict) -> List[str]:
        """Valida os dados do post antes de enviar - apenas campos do schema"""
        errors = []
        
        # Campos obrigat√≥rios (baseado no schema real)
        if not data.get('title'):
            errors.append('title √© obrigat√≥rio')
        if not data.get('content'):
            errors.append('content √© obrigat√≥rio')
        
        # Valida√ß√µes de tamanho
        if data.get('title') and len(data['title']) > 255:
            errors.append('title n√£o pode ter mais de 255 caracteres')
        
        if data.get('excerpt') and len(data['excerpt']) > 500:
            errors.append('excerpt n√£o pode ter mais de 500 caracteres')
        
        return errors
    
    def _generate_slug(self, text: str) -> str:
        """Gera slug URL-friendly"""
        # Remove acentos
        text = unicodedata.normalize('NFD', text)
        text = ''.join(c for c in text if unicodedata.category(c) != 'Mn')
        
        # Converte para min√∫sculas e substitui espa√ßos/caracteres especiais
        text = re.sub(r'[^\w\s-]', '', text.lower())
        text = re.sub(r'[-\s]+', '-', text)
        
        return text.strip('-')
    
    def format_post_data(self, raw_data: Dict, locale: Optional[str] = None) -> Dict:
        """Formata os dados para o padr√£o do Strapi - APENAS campos do schema"""
        # Define locale a ser usado
        target_locale = locale or self.locale
        
        # Gera slug se n√£o fornecido
        if not raw_data.get('slug'):
            raw_data['slug'] = self._generate_slug(raw_data['title'])
        
        # Estrutura APENAS com campos que existem no schema
        formatted = {
            'data': {
                'title': raw_data['title'],
                'content': raw_data['content'],
                'slug': raw_data['slug'],
                'excerpt': raw_data.get('excerpt', ''),
                'locale': target_locale
            }
        }
        
        return formatted
    
    def create_post(self, raw_data: Dict, locale: Optional[str] = None) -> Dict:
        """Cria um post no Strapi com suporte a locale espec√≠fico"""
        try:
            # Define locale
            target_locale = locale or self.locale
            
            # Valida dados
            errors = self.validate_post_data(raw_data)
            if errors:
                raise ValueError(f"Valida√ß√£o falhou: {', '.join(errors)}")
            
            # Formata dados com locale
            post_data = self.format_post_data(raw_data, target_locale)
            
            # Adiciona par√¢metro locale na URL
            url = f"{self.base_url}/api/posts?locale={target_locale}"
            
            # Envia para o Strapi
            response = requests.post(url, json=post_data, headers=self.headers)
            
            if response.status_code in [200, 201]:
                self.stats['created'] += 1
                data = response.json()
                logger.info(f"Post criado com sucesso em {target_locale}: {data['data']['title']}")
                return {
                    'success': True,
                    'id': data['data']['id'],
                    'locale': target_locale,
                    'slug': data['data']['slug'],
                    'url': f"/{target_locale}/post/{data['data']['slug']}"
                }
            else:
                error_msg = response.json().get('error', {}).get('message', response.text)
                raise Exception(f"Erro do Strapi: {error_msg}")
                
        except Exception as e:
            self.stats['failed'] += 1
            self.stats['errors'].append({
                'title': raw_data.get('title', 'Sem t√≠tulo'),
                'locale': target_locale,
                'error': str(e)
            })
            
            logger.error(f"Erro ao criar post em {target_locale}: {e}")
            return {
                'success': False,
                'error': str(e),
                'locale': target_locale
            }
    
    def show_stats(self):
        """Mostra estat√≠sticas de opera√ß√µes"""
        print(f"\nüìä Estat√≠sticas:")
        print(f"   ‚úÖ Criados: {self.stats['created']}")
        print(f"   ‚ùå Falharam: {self.stats['failed']}")
        if self.stats['errors']:
            print(f"   üîç Erros:")
            for error in self.stats['errors']:
                print(f"      - {error['title']} ({error['locale']}): {error['error']}")

def test_schema_compliance():
    """Teste com schema correto"""
    
    client = StrapiI18nIntegration()
    
    print('üîß TESTE: SCHEMA CORRETO - APENAS CAMPOS QUE EXISTEM')
    print('=' * 55)
    
    # Teste com apenas os campos do schema
    test_data = {
        'title': '‚úÖ Schema Correto - Sistema Funcionando',
        'content': '''## Schema Perfeitamente Alinhado! üéØ

O sistema agora usa **apenas os campos que existem** no schema do Strapi:

### ‚úÖ Campos utilizados:
- **title** (string, obrigat√≥rio)
- **content** (richtext)
- **slug** (uid, auto-gerado)
- **excerpt** (text, opcional)
- **locale** (para i18n)

### üöÄ Resultado:
**Sistema funcionando sem erros de schema!**''',
        'excerpt': 'Sistema corrigido para usar apenas campos do schema real'
    }
    
    # Testar nos 3 idiomas
    for locale in ['pt-BR', 'en', 'es']:
        print(f'\nüåê Testando {locale}:')
        result = client.create_post(test_data, locale)
        
        if result['success']:
            print(f'   ‚úÖ Sucesso - ID: {result["id"]}')
            print(f'   üîó Slug: {result["slug"]}')
        else:
            print(f'   ‚ùå Erro: {result["error"]}')
    
    client.show_stats()

if __name__ == '__main__':
    test_schema_compliance()
