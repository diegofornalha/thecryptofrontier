#!/usr/bin/env python3
"""
MCP Server para Blog Agent
Permite que Claude Code execute tarefas de blog atrav√©s de ferramentas MCP
"""
import asyncio
import json
from typing import Dict, Any, List
from datetime import datetime
import aiohttp
import os

class MCPBlogTools:
    """Ferramentas MCP para opera√ß√µes de blog"""
    
    def __init__(self):
        self.strapi_url = os.getenv('STRAPI_URL', 'http://localhost:1338')
        self.strapi_token = os.getenv('STRAPI_API_TOKEN')
    
    async def create_blog_post(self, topic: str, keywords: List[str] = None) -> Dict[str, Any]:
        """
        Ferramenta MCP: Cria estrutura de post para o blog
        Esta ferramenta ser√° chamada pelo Claude Code
        """
        
        # Claude Code ir√° preencher o conte√∫do
        post_structure = {
            "topic": topic,
            "keywords": keywords or [],
            "sections_needed": [
                "introduction",
                "main_content", 
                "conclusion",
                "seo_metadata"
            ],
            "instructions": """
            Por favor, crie um post de blog completo com:
            1. T√≠tulo atrativo
            2. Introdu√ß√£o envolvente
            3. Conte√∫do principal com subt√≠tulos
            4. Conclus√£o com CTA
            5. Meta descri√ß√£o SEO
            6. Tags relevantes
            """
        }
        
        return post_structure
    
    async def enhance_content(self, content: str, style: str = "professional") -> str:
        """
        Ferramenta MCP: Melhora conte√∫do existente
        Claude Code pode usar para refinar textos
        """
        
        enhancement_request = {
            "original_content": content,
            "style": style,
            "improvements_needed": [
                "clarity",
                "engagement", 
                "seo_optimization",
                "readability"
            ]
        }
        
        return enhancement_request
    
    async def research_topic(self, topic: str, sources: int = 5) -> Dict[str, Any]:
        """
        Ferramenta MCP: Estrutura pesquisa sobre t√≥pico
        Claude Code ir√° executar a pesquisa
        """
        
        research_template = {
            "topic": topic,
            "sources_needed": sources,
            "research_areas": [
                "current_trends",
                "statistics",
                "expert_opinions",
                "case_studies",
                "best_practices"
            ],
            "output_format": "structured_notes"
        }
        
        return research_template
    
    async def publish_to_strapi(self, post_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Ferramenta MCP: Publica post no Strapi
        Esta √© a √∫nica que faz chamada real √† API
        """
        
        headers = {
            'Authorization': f'Bearer {self.strapi_token}',
            'Content-Type': 'application/json'
        }
        
        strapi_data = {
            'data': {
                'title': post_data.get('title'),
                'slug': post_data.get('slug'),
                'content': post_data.get('content'),
                'excerpt': post_data.get('excerpt'),
                'seo': post_data.get('seo'),
                'status': 'published',
                'publishedAt': datetime.now().isoformat()
            }
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.strapi_url}/api/posts",
                headers=headers,
                json=strapi_data
            ) as response:
                if response.status in [200, 201]:
                    result = await response.json()
                    return {
                        "success": True,
                        "post_id": result['data']['id'],
                        "url": f"{self.strapi_url}/posts/{result['data']['attributes']['slug']}"
                    }
                else:
                    return {
                        "success": False,
                        "error": f"Status {response.status}"
                    }

# Configura√ß√£o MCP
MCP_TOOLS = {
    "create_blog_post": {
        "description": "Cria estrutura para novo post de blog",
        "parameters": {
            "topic": "string",
            "keywords": "array"
        }
    },
    "enhance_content": {
        "description": "Melhora conte√∫do existente",
        "parameters": {
            "content": "string",
            "style": "string"
        }
    },
    "research_topic": {
        "description": "Estrutura pesquisa sobre t√≥pico",
        "parameters": {
            "topic": "string",
            "sources": "number"
        }
    },
    "publish_to_strapi": {
        "description": "Publica post finalizado no Strapi",
        "parameters": {
            "post_data": "object"
        }
    }
}

# Servidor MCP
async def start_mcp_server():
    """Inicia servidor MCP para Claude Code"""
    tools = MCPBlogTools()
    
    print("üöÄ MCP Blog Server iniciado!")
    print("Ferramentas dispon√≠veis:")
    for tool_name in MCP_TOOLS:
        print(f"  - {tool_name}")
    
    # O Claude Code ir√° interagir com essas ferramentas
    # atrav√©s do protocolo MCP

if __name__ == "__main__":
    asyncio.run(start_mcp_server())